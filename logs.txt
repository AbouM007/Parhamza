server/add-contact-columns.ts:  console.log('üîß Ajout des colonnes de contact √† la table annonces...');
server/add-contact-columns.ts:    console.log('üîç V√©rification de la structure actuelle...');
server/add-contact-columns.ts:      console.log('üìä Colonnes actuelles:', Object.keys(tableData[0]));
server/add-contact-columns.ts:        console.log('‚úÖ Toutes les colonnes de contact existent d√©j√† !');
server/add-contact-columns.ts:      console.log('‚ö†Ô∏è Colonnes manquantes:', missingColumns);
server/add-contact-columns.ts:      console.log('üîß Note: Les colonnes doivent √™tre ajout√©es manuellement via l\'interface Supabase');
server/add-contact-columns.ts:      console.log('üìù SQL √† ex√©cuter dans Supabase SQL Editor:');
server/add-contact-columns.ts:      console.log(`
server/check-and-create-users.ts:  console.log('üë• V√âRIFICATION ET CR√âATION DES USERS MANQUANTS');
server/check-and-create-users.ts:    console.log('‚úÖ Users existants:', existingUsers?.length || 0);
server/check-and-create-users.ts:      console.log(`   ${user.id}: ${user.name} (${user.email})`);
server/check-and-create-users.ts:    console.log('\n‚ûï Users √† cr√©er:', usersToCreate.length);
server/check-and-create-users.ts:        console.log(`   ${user.id}: ${user.name} (${user.email})`);
server/check-and-create-users.ts:      console.log('\n‚úÖ USERS CR√â√âS:', createdUsers?.length);
server/check-and-create-users.ts:        console.log(`   ‚úì ${user.id}: ${user.name}`);
server/check-and-create-users.ts:      console.log('‚úÖ Tous les users existent d√©j√† !');
server/check-and-create-users.ts:    console.log('\nüîó TEST RELATIONS ANNONCES ‚Üî USERS');
server/check-and-create-users.ts:      console.log('‚úÖ RELATIONS FONCTIONNELLES !');
server/check-and-create-users.ts:      console.log(`üìä ${joinTest?.length} annonces test√©es avec succ√®s`);
server/check-and-create-users.ts:        console.log(`   ${annonce.id}: ${annonce.title} ‚Üí ${annonce.users.name}`);
server/check-database-relations.ts:  console.log('üîç V√âRIFICATION DES RELATIONS DE BASE DE DONN√âES');
server/check-database-relations.ts:    console.log('üìã Premi√®res annonces avec [BD]:');
server/check-database-relations.ts:      console.log(`   ID: ${a.id} | ${a.title} | User: ${a.user_id}`);
server/check-database-relations.ts:      console.log('üë• User IDs uniques trouv√©s:', uniqueUserIds);
server/check-database-relations.ts:        console.log('‚úÖ Users existants dans table users:');
server/check-database-relations.ts:        existingUsers?.forEach(u => console.log(`   ${u.id}: ${u.name}`));
server/check-database-relations.ts:          console.log('‚ö†Ô∏è  Users manquants:', missingIds);
server/check-database-relations.ts:          console.log('‚úÖ Toutes les relations users sont OK');
server/check-database-relations.ts:      console.log('‚ö†Ô∏è  Erreur jointure (normal si users manquants):', joinError.message);
server/check-database-relations.ts:      console.log('‚úÖ Test jointure r√©ussi:', joinTest?.length || 0, 'annonces avec users');
server/check-database-relations.ts:      console.log('üìä R√©partition par cat√©gorie:');
server/check-database-relations.ts:        console.log(`   ${cat}: ${count}`);
server/check-replit-domain.ts:console.log('üåê DOMAINE REPLIT ACTUEL :');
server/check-replit-domain.ts:console.log('');
server/check-replit-domain.ts:  console.log(`üì± Domaines Replit : ${replitDomains}`);
server/check-replit-domain.ts:  console.log('‚ö†Ô∏è REPLIT_DOMAINS non trouv√©e');
server/check-replit-domain.ts:  console.log(`üîó URL probable : https://${replSlug}.${replOwner}.replit.app`);
server/check-replit-domain.ts:  console.log('üìã Variables Replit :');
server/check-replit-domain.ts:  console.log(`   REPL_ID: ${replId || 'non trouv√©e'}`);
server/check-replit-domain.ts:  console.log(`   REPL_OWNER: ${replOwner || 'non trouv√©e'}`);
server/check-replit-domain.ts:  console.log(`   REPL_SLUG: ${replSlug || 'non trouv√©e'}`);
server/check-replit-domain.ts:console.log('');
server/check-replit-domain.ts:console.log('üí° POUR TROUVER TON DOMAINE REPLIT :');
server/check-replit-domain.ts:console.log('   Regarde l\'URL de ton navigateur quand tu utilises l\'app');
server/check-replit-domain.ts:console.log('   Exemple: https://passion-auto2roues.johndoe.replit.app');
server/create-missing-users.ts:  console.log('üë• CR√âATION DES USERS MANQUANTS POUR LES ANNONCES [BD]');
server/create-missing-users.ts:    console.log('‚úÖ USERS CR√â√âS:', createdUsers?.length);
server/create-missing-users.ts:      console.log(`   ${user.id}: ${user.name} (${user.type})`);
server/create-missing-users.ts:    console.log('\nüîó TEST RELATION ANNONCES ‚Üî USERS');
server/create-missing-users.ts:      console.log('‚úÖ RELATION FONCTIONNELLE !');
server/create-missing-users.ts:        console.log(`   ${annonce.id}: ${annonce.title} ‚Üí ${annonce.users.name}`);
server/create-simple-users.ts:  console.log('üë• CR√âATION DES 6 USERS MANQUANTS - VERSION SIMPLIFI√âE');
server/create-simple-users.ts:  console.log('üìã D√âTAIL DES 6 USERS √Ä CR√âER:');
server/create-simple-users.ts:    console.log(`   ID: ${user.id} | Email: ${user.email} | Nom: ${user.name} | Type: ${user.type}`);
server/create-simple-users.ts:      console.log('\nüí° SOLUTION: V√©rifiez que la table users existe avec les bons champs.');
server/create-simple-users.ts:    console.log('\n‚úÖ USERS CR√â√âS AVEC SUCC√àS:');
server/create-simple-users.ts:      console.log(`   ‚úì ${user.id}: ${user.name} (${user.email}) - ${user.type}`);
server/create-simple-users.ts:    console.log(`\nüìä TOTAL: ${createdUsers?.length} users cr√©√©s`);
server/create-wishlist-direct.ts:  console.log('üîÑ Cr√©ation table wishlist via serveur Node.js...');
server/create-wishlist-direct.ts:    console.log('‚úÖ Table wishlist cr√©√©e avec succ√®s');
server/create-wishlist-direct.ts:    console.log('‚úÖ Table wishlist v√©rifi√©e et accessible');
server/create-wishlist-direct.ts:  console.log('üîÑ Migration favoris bio ‚Üí table wishlist...');
server/create-wishlist-direct.ts:        console.log(`üîÑ Migration ${favorites.length} favoris pour utilisateur ${user.id}`);
server/create-wishlist-direct.ts:    console.log(`‚úÖ Migration termin√©e: ${migratedCount} favoris migr√©s`);
server/create-wishlist.js:  console.log('üîß Cr√©ation de la table wishlist...');
server/create-wishlist.js:      console.log('‚úÖ Table wishlist cr√©√©e avec succ√®s');
server/direct-db-setup.ts:  console.log('üîÑ Configuration de la base de donn√©es...');
server/direct-db-setup.ts:    console.log('üìù Cr√©ation de la table profiles...');
server/direct-db-setup.ts:      console.log('‚úÖ Connexion Supabase OK');
server/direct-db-setup.ts:      console.log('üìä Tables existantes:', tables?.map(t => t.table_name));
server/find-supabase-info.ts:console.log('üîç INFORMATIONS SUPABASE POUR OAUTH :');
server/find-supabase-info.ts:console.log('');
server/find-supabase-info.ts:  console.log('üìä PROJET SUPABASE :');
server/find-supabase-info.ts:  console.log(`   URL compl√®te : ${supabaseUrl}`);
server/find-supabase-info.ts:  console.log(`   Project ID : ${projectId}`);
server/find-supabase-info.ts:  console.log('');
server/find-supabase-info.ts:  console.log('üîó URLs √Ä CONFIGURER DANS GOOGLE CLOUD :');
server/find-supabase-info.ts:  console.log('');
server/find-supabase-info.ts:  console.log('Origines JavaScript autoris√©es :');
server/find-supabase-info.ts:  console.log(`   ${supabaseUrl}`);
server/find-supabase-info.ts:  console.log(`   https://[ton-repl-name].[username].replit.app`);
server/find-supabase-info.ts:  console.log('');
server/find-supabase-info.ts:  console.log('URI de redirection autoris√©s :');
server/find-supabase-info.ts:  console.log(`   ${supabaseUrl}/auth/v1/callback`);
server/find-supabase-info.ts:  console.log(`   https://[ton-repl-name].[username].replit.app/auth/callback`);
server/find-supabase-info.ts:  console.log('‚ùå VITE_SUPABASE_URL non trouv√©e');
server/find-supabase-info.ts:console.log('');
server/find-supabase-info.ts:console.log('üéØ √âTAPES SUIVANTES :');
server/find-supabase-info.ts:console.log('1. Aller sur https://console.cloud.google.com/');
server/find-supabase-info.ts:console.log('2. Cr√©er OAuth 2.0 Client ID');
server/find-supabase-info.ts:console.log('3. Copier les URLs ci-dessus');
server/find-supabase-info.ts:console.log('4. R√©cup√©rer Client ID + Secret');
server/find-supabase-info.ts:console.log('5. Les coller dans Supabase Dashboard ‚Üí Auth ‚Üí Providers ‚Üí Google');
server/fix-oauth-redirect.ts:console.log('üîç ANALYSE DU PROBL√àME OAUTH GOOGLE :');
server/fix-oauth-redirect.ts:console.log('');
server/fix-oauth-redirect.ts:console.log('‚ùå PROBL√àME IDENTIFI√â :');
server/fix-oauth-redirect.ts:console.log('   Redirection vers localhost:3000 au lieu du domaine Replit');
server/fix-oauth-redirect.ts:console.log('');
server/fix-oauth-redirect.ts:console.log('üéØ CAUSE :');
server/fix-oauth-redirect.ts:console.log('   1. Dans Google Cloud Console, une des URLs contient localhost:3000');
server/fix-oauth-redirect.ts:console.log('   2. Ou Supabase redirectTo n\'est pas correctement configur√©');
server/fix-oauth-redirect.ts:console.log('');
server/fix-oauth-redirect.ts:console.log('üîß SOLUTIONS :');
server/fix-oauth-redirect.ts:console.log('');
server/fix-oauth-redirect.ts:console.log('1. V√âRIFIER GOOGLE CLOUD CONSOLE :');
server/fix-oauth-redirect.ts:console.log('   - Aller sur https://console.cloud.google.com/');
server/fix-oauth-redirect.ts:console.log('   - APIs & Services ‚Üí Credentials');
server/fix-oauth-redirect.ts:console.log('   - Cliquer sur ton OAuth Client ID');
server/fix-oauth-redirect.ts:console.log('   - SUPPRIMER toute URL contenant localhost:3000');
server/fix-oauth-redirect.ts:console.log('   - GARDER SEULEMENT :');
server/fix-oauth-redirect.ts:console.log('     * https://workspace.amineennoury.replit.app/auth/callback');
server/fix-oauth-redirect.ts:console.log('');
server/fix-oauth-redirect.ts:console.log('2. V√âRIFIER SUPABASE DASHBOARD :');
server/fix-oauth-redirect.ts:console.log('   - Authentication ‚Üí URL Configuration');
server/fix-oauth-redirect.ts:console.log('   - Site URL : https://workspace.amineennoury.replit.app');
server/fix-oauth-redirect.ts:console.log('   - Redirect URLs : https://workspace.amineennoury.replit.app/**');
server/fix-oauth-redirect.ts:console.log('');
server/fix-oauth-redirect.ts:console.log('3. TOKEN RE√áU EST VALIDE :');
server/fix-oauth-redirect.ts:console.log('   - L\'utilisateur est bien authentifi√©');
server/fix-oauth-redirect.ts:console.log('   - Email : amine.ennoury@gmail.com');
server/fix-oauth-redirect.ts:console.log('   - ID : 530429f5-3766-4907-ba51-862d61710112');
server/fix-oauth-redirect.ts:console.log('   - Le probl√®me est juste la redirection');
server/fix-oauth-redirect.ts:console.log('');
server/fix-oauth-redirect.ts:console.log('üöÄ APR√àS CORRECTION :');
server/fix-oauth-redirect.ts:console.log('   L\'utilisateur sera redirig√© vers workspace.amineennoury.replit.app');
server/fix-oauth-redirect.ts:console.log('   Et synchronis√© automatiquement dans les tables users + profiles');
server/fix-trigger.ts:  console.log('üîß Correction du d√©clencheur de synchronisation...');
server/fix-trigger.ts:    console.log('üìã PROBL√àME IDENTIFI√â :');
server/fix-trigger.ts:    console.log('Le d√©clencheur sur auth.users ne se d√©clenche pas automatiquement');
server/fix-trigger.ts:    console.log('car auth.users est dans un sch√©ma s√©par√© (auth) de Supabase.');
server/fix-trigger.ts:    console.log('');
server/fix-trigger.ts:    console.log('SOLUTION : Utiliser les hooks Supabase ou cr√©er un endpoint manuel');
server/fix-trigger.ts:    console.log('');
server/fix-trigger.ts:    console.log('üéØ NOUVELLE STRAT√âGIE :');
server/fix-trigger.ts:    console.log('1. Modifier le code frontend pour synchroniser manuellement');
server/fix-trigger.ts:    console.log('2. Cr√©er un endpoint /api/auth/sync pour synchronisation');
server/fix-trigger.ts:    console.log('3. Appeler cet endpoint apr√®s inscription/connexion');
server/fix-users-references.ts:  console.log('üîß CORRECTION DES R√âF√âRENCES UTILISATEURS');
server/fix-users-references.ts:    console.log('üë• User IDs trouv√©s dans annonces:', uniqueUserIds);
server/fix-users-references.ts:    console.log('‚úÖ Users existants:', existingUserIds);
server/fix-users-references.ts:    console.log('‚ûï Users √† cr√©er:', missingUserIds);
server/fix-users-references.ts:      console.log('‚úÖ Users cr√©√©s:', createdUsers?.length);
server/fix-users-references.ts:    console.log('üéâ V√âRIFICATION - Annonces avec users:', finalCheck);
server/insert-test-data.ts:  console.log('üìù INSERTION DONN√âES TEST DANS TABLE EXEMPLE');
server/insert-test-data.ts:      console.log('üí° Cr√©ez d\'abord la table avec le SQL Editor de Supabase');
server/insert-test-data.ts:    console.log('‚úÖ PREUVE CONNEXION SUPABASE - Donn√©es ins√©r√©es:', data);
server/insert-test-data.ts:      console.log('üéâ CONFIRMATION - Toutes les donn√©es dans la table exemple:', verifyData);
server/lib/supabase.ts:  console.log('üîó Connexion Supabase initialis√©e avec le client serveur')
server/manual-oauth-sync.ts:  console.log('üîÑ Synchronisation manuelle utilisateur Google OAuth...');
server/manual-oauth-sync.ts:    console.log('üìä Donn√©es utilisateur Google :');
server/manual-oauth-sync.ts:    console.log('   Email:', user.email);
server/manual-oauth-sync.ts:    console.log('   Nom:', metadata.full_name || metadata.name);
server/manual-oauth-sync.ts:    console.log('   Avatar:', metadata.avatar_url);
server/manual-oauth-sync.ts:    console.log('   Provider:', metadata.provider);
server/manual-oauth-sync.ts:    console.log('‚úÖ Utilisateur Google synchronis√© dans table users unifi√©e:');
server/manual-oauth-sync.ts:    console.log('üë§ Utilisateur:', syncedUser.name);
server/manual-oauth-sync.ts:    console.log('üìß Email:', syncedUser.email);
server/manual-oauth-sync.ts:    console.log('üîó Type:', syncedUser.type);
server/middleware/auth.ts:      console.log(
server/migrate-all-49-annonces.ts:    console.log('üìÅ Fichier mockData.ts lu avec succ√®s');
server/migrate-all-49-annonces.ts:  console.log('üöÄ MIGRATION COMPL√àTE - TOUTES LES 49 ANNONCES MOCK');
server/migrate-all-49-annonces.ts:    console.log(`üìä ${transformedVehicles.length} annonces pr√©par√©es pour migration`);
server/migrate-all-49-annonces.ts:    console.log('üóëÔ∏è Table annonces vid√©e');
server/migrate-all-49-annonces.ts:    console.log(`‚úÖ MIGRATION R√âUSSIE: ${data?.length} annonces ins√©r√©es`);
server/migrate-all-49-annonces.ts:    console.log('üìà R√âPARTITION:');
server/migrate-all-49-annonces.ts:      console.log(`   ${cat}: ${count}`);
server/migrate-all-mock-data.ts:  console.log('üöÄ MIGRATION COMPL√àTE - 49 ANNONCES MOCK ‚Üí TABLE ANNONCES');
server/migrate-all-mock-data.ts:  console.log(`üìä Nombre total d'annonces √† migrer: ${allMockVehicles.length}`);
server/migrate-all-mock-data.ts:      console.log('‚ö†Ô∏è Erreur suppression donn√©es existantes:', deleteError);
server/migrate-all-mock-data.ts:      console.log('üóëÔ∏è Table annonces vid√©e');
server/migrate-all-mock-data.ts:      console.log(`üì¶ Migration lot ${Math.floor(i/batchSize) + 1}/${Math.ceil(allMockVehicles.length/batchSize)} (${batch.length} annonces)`);
server/migrate-all-mock-data.ts:      console.log(`‚úÖ Lot ${Math.floor(i/batchSize) + 1} ins√©r√©: ${data?.length} annonces`);
server/migrate-all-mock-data.ts:    console.log(`üéâ MIGRATION TERMIN√âE: ${totalInserted} annonces ins√©r√©es`);
server/migrate-all-mock-data.ts:      console.log(`üìä TOTAL FINAL: ${finalCount.length} annonces dans la table`);
server/migrate-all-mock-data.ts:      console.log('üìà R√âPARTITION PAR CAT√âGORIE:');
server/migrate-all-mock-data.ts:        console.log(`   ${cat}: ${count} annonces`);
server/migrate-complete-49.ts:  console.log('üöÄ MIGRATION COMPL√àTE DES 49 ANNONCES');
server/migrate-complete-49.ts:  console.log(`üìä Pr√©paration de ${complete49Annonces.length} annonces...`);
server/migrate-complete-49.ts:    console.log('üóëÔ∏è Table annonces vid√©e');
server/migrate-complete-49.ts:      console.log(`üì¶ Lot ${Math.floor(i/batchSize) + 1}/${Math.ceil(complete49Annonces.length/batchSize)}`);
server/migrate-complete-49.ts:      console.log(`‚úÖ ${data?.length} annonces ins√©r√©es`);
server/migrate-complete-49.ts:    console.log(`üéâ MIGRATION TERMIN√âE: ${totalInserted} annonces`);
server/migrate-complete-49.ts:      console.log('üìà R√âPARTITION FINALE:');
server/migrate-complete-49.ts:        console.log(`   ${cat}: ${count} annonces`);
server/migrate-mock-to-annonces.ts:  console.log('üöÄ MIGRATION DES DONN√âES MOCK VERS TABLE ANNONCES');
server/migrate-mock-to-annonces.ts:  console.log(`üìä Nombre d'annonces √† migrer: ${mockVehiclesToMigrate.length}`);
server/migrate-mock-to-annonces.ts:    console.log('‚úÖ Table annonces trouv√©e');
server/migrate-mock-to-annonces.ts:    console.log('‚úÖ MIGRATION R√âUSSIE !');
server/migrate-mock-to-annonces.ts:    console.log(`üìã ${data?.length || 0} annonces ins√©r√©es`);
server/migrate-mock-to-annonces.ts:      console.log(`üìä Total annonces dans la table: ${totalCount?.length || 0}`);
server/migrate-mock-to-annonces.ts:        console.log('\nüìã APER√áU DES ANNONCES MIGR√âES:');
server/migrate-mock-to-annonces.ts:          console.log(`${index + 1}. ${annonce.title} - ${annonce.price}‚Ç¨ (${annonce.location})`);
server/read-vehicles.ts:  console.log('üìã LECTURE DONN√âES TABLE ANNONCES');
server/read-vehicles.ts:    console.log(`üìä Nombre total de v√©hicules: ${count}`);
server/read-vehicles.ts:      console.log('üì≠ Table annonces vide - aucune donn√©e');
server/read-vehicles.ts:    console.log('‚úÖ DONN√âES VEHICLES TROUV√âES:');
server/read-vehicles.ts:      console.log(`\n${index + 1}. ${vehicle.title || 'Sans titre'}`);
server/read-vehicles.ts:      console.log(`   ID: ${vehicle.id}`);
server/read-vehicles.ts:      console.log(`   Cat√©gorie: ${vehicle.category}`);
server/read-vehicles.ts:      console.log(`   Prix: ${vehicle.price}‚Ç¨`);
server/read-vehicles.ts:      console.log(`   Marque: ${vehicle.brand}`);
server/read-vehicles.ts:      console.log(`   Mod√®le: ${vehicle.model}`);
server/read-vehicles.ts:      console.log(`   Utilisateur: ${vehicle.userId}`);
server/read-vehicles.ts:    console.log('\nüìà STATISTIQUES:');
server/read-vehicles.ts:    console.log(`   Cat√©gories: ${categories.join(', ')}`);
server/read-vehicles.ts:    console.log(`   Marques: ${brands.join(', ')}`);
server/routes/admin.ts:  console.log('üîê V√©rification admin pour:', userEmail);
server/routes/admin.ts:    console.log('‚ùå Pas d\'email dans headers');
server/routes/admin.ts:    console.log('üë§ User trouv√©:', user?.id);
server/routes/admin.ts:      console.log('‚ùå Utilisateur non trouv√© dans DB');
server/routes/admin.ts:    console.log('üõ°Ô∏è Admin trouv√©:', admin?.id, 'erreur:', adminError);
server/routes/admin.ts:      console.log('‚ùå Pas de droits admin pour:', userEmail);
server/routes/admin.ts:    console.log('‚úÖ Admin v√©rifi√©:', admin.role);
server/routes/admin.ts:    console.log('üîç [DEBUG] Test basique table subscriptions...');
server/routes/admin.ts:    console.log(`üìä ${count} abonnements trouv√©s dans la table`);
server/routes/admin.ts:    console.log(`‚úÖ Donn√©es r√©cup√©r√©es:`, subscriptions);
server/routes/auth-sync.ts:    console.log(`üîÑ Synchronisation manuelle utilisateur: ${userId}`);
server/routes/auth-sync.ts:    console.log(`‚úÖ Utilisateur synchronis√©: ${syncedUser.name}`);
server/routes/avatar.ts:      console.log(`üöÄ D√©but upload avatar - userId: ${userId}`);
server/routes/avatar.ts:      console.log(
server/routes/avatar.ts:        console.log("‚ùå Aucun fichier fourni");
server/routes/avatar.ts:      console.log(`üñºÔ∏è Upload d'avatar pour l'utilisateur ${userId}`);
server/routes/avatar.ts:        console.log("‚ùå Utilisateur non trouv√©:", userError);
server/routes/avatar.ts:        console.log("‚ùå Utilisateur non autoris√©:", existingUser.type);
server/routes/avatar.ts:            console.log(`üóëÔ∏è Ancien avatar supprim√©: ${oldFilePath}`);
server/routes/avatar.ts:      console.log(`‚úÖ Avatar upload√© avec succ√®s: ${avatarUrl}`);
server/routes/avatar.ts:        console.log(`üóëÔ∏è Avatar supprim√©: ${filePath}`);
server/routes/avatar.ts:    console.log(`‚úÖ Avatar supprim√© pour l'utilisateur ${userId}`);
server/routes/favorites.ts:    console.log('üîÑ R√©cup√©ration favoris pour utilisateur:', userId);
server/routes/favorites.ts:    console.log('‚úÖ Favoris r√©cup√©r√©s:', favorites.length);
server/routes/favorites.ts:    console.log('üîÑ Ajout favori:', { userId, vehicleId });
server/routes/favorites.ts:    console.log('‚úÖ Favori ajout√©');
server/routes/favorites.ts:    console.log('üîÑ Suppression favori:', { userId, vehicleId });
server/routes/favorites.ts:    console.log('‚úÖ Favori supprim√©');
server/routes/images.ts:      console.log(
server/routes/images.ts:          console.log(
server/routes/images.ts:            console.log(
server/routes/images.ts:          console.log("üè∑Ô∏è  Ajout du filigrane texte au centre...");
server/routes/images.ts:          console.log(`‚úÖ Image upload√©e: ${fileName}`);
server/routes/images.ts:    console.log(`üóëÔ∏è Suppression image: ${fullPath}`);
server/routes/images.ts:    console.log(`‚úÖ Image supprim√©e: ${fullPath}`);
server/routes/images.ts:      console.log(`üè¢ Upload logo entreprise pour utilisateur ${userId}`);
server/routes/images.ts:        console.log(
server/routes/images.ts:        console.log(
server/routes/images.ts:        console.log(`‚úÖ Logo optimis√©: ${Math.round(finalSizeMB * 1000)}KB`);
server/routes/images.ts:        console.log(`‚úÖ Logo upload√©: ${fileName}`);
server/routes/messages-simple.ts:console.log("üîß Route messages-simple charg√©e");
server/routes/messages-simple.ts:    console.log("üì¨ Envoi message avec IDs:", {
server/routes/messages-simple.ts:    console.log("üìù IDs utilis√©s directement:", {
server/routes/messages-simple.ts:        console.log("‚úÖ Message sauvegard√© dans Supabase!", messageId);
server/routes/messages-simple.ts:        console.log("‚ùå Erreur cr√©ation message:", error.message);
server/routes/messages-simple.ts:      console.log("‚ùå Erreur insertion:", err);
server/routes/messages-simple.ts:      console.log("‚ùå Impossible de cr√©er le message dans Supabase");
server/routes/messages-simple.ts:    console.log("üìñ Marquage messages comme lus:", { messageIds, userId });
server/routes/messages-simple.ts:    console.log("‚úÖ Messages marqu√©s comme lus");
server/routes/messages-simple.ts:    console.log("üì¨ R√©cup√©ration messages pour utilisateur:", userId);
server/routes/messages-simple.ts:    console.log("üìù ID utilis√© directement:", userId);
server/routes/messages-simple.ts:    console.log(`‚úÖ Messages trouv√©s: ${messages.length}`);
server/routes/messages-simple.ts:    console.log("üì¨ Chargement conversation:", { vehicleId, user1Id, user2Id });
server/routes/messages-simple.ts:    console.log(
server/routes/messages-simple.ts:    console.log(
server/routes/messages-simple.ts:    console.log("‚úÖ Messages nettoy√©s avec succ√®s");
server/routes/messages-simple.ts:    console.log("üóëÔ∏è Tous les messages supprim√©s");
server/routes/messages-simple.ts:    console.log("üîÑ D√©but migration utilisateurs vers UUIDs...");
server/routes/messages-simple.ts:    console.log(`üìä ${numericUsers.length} utilisateurs √† migrer`);
server/routes/messages-simple.ts:        console.log(`üîÑ Migration ${user.id} ‚Üí ${newUuid}`);
server/routes/messages-simple.ts:        console.log(
server/routes/messages-simple.ts:    console.log("üéâ Migration termin√©e !");
server/routes/professional-shop.ts:    console.log('üîç Recherche du compte professionnel ID:', professionalAccountId);
server/routes/professional-shop.ts:      console.log('‚ùå Compte professionnel non trouv√©:', { professionalAccountId, proError });
server/routes/professional-shop.ts:    console.log('‚úÖ Compte professionnel trouv√©, user_id:', proAccount.user_id);
server/routes/professional-shop.ts:    console.log('üîç Recherche des annonces pour user_id:', proAccount.user_id);
server/routes/professional-shop.ts:    console.log('üéØ Annonces trouv√©es:', vehicles?.length || 0);
server/routes/professional-shop.ts:      console.log('üìã Premi√®re annonce:', vehicles[0].title, 'ID:', vehicles[0].id);
server/routes/professional-shop.ts:    console.log('üé® Mise √† jour personnalisation pour user_id:', userId);
server/routes/professional-shop.ts:    console.log('üìù Donn√©es de personnalisation re√ßues:', {
server/routes/professional-shop.ts:    console.log('‚úÖ Personnalisation mise √† jour avec succ√®s pour user_id:', userId);
server/routes/saved-searches.ts:    console.log('üîÑ R√©cup√©ration recherches sauvegard√©es pour utilisateur:', userId);
server/routes/saved-searches.ts:    console.log('‚úÖ Recherches r√©cup√©r√©es:', searches.length);
server/routes/saved-searches.ts:    console.log('üîÑ Sauvegarde recherche:', { userId, name, alertsEnabled });
server/routes/saved-searches.ts:    console.log('‚úÖ Recherche sauvegard√©e:', result.id);
server/routes/saved-searches.ts:    console.log('üîÑ Suppression recherche:', { searchId });
server/routes/saved-searches.ts:    console.log('‚úÖ Recherche supprim√©e');
server/routes/saved-searches.ts:    console.log('üîÑ Mise √† jour alertes:', { searchId, alertsEnabled });
server/routes/saved-searches.ts:    console.log('‚úÖ Alertes mises √† jour');
server/routes/subscriptions.ts:    console.log(
server/routes/subscriptions.ts:    console.log(`‚úÖ Session checkout cr√©√©e: ${session.id}`);
server/routes/subscriptions.ts:        console.log("‚úÖ Membership mis √† jour: canceled");
server/routes/subscriptions.ts:        console.log(`‚úÖ Subscription ${subscription.status}:`, subscription.id);
server/routes/subscriptions.ts:          console.log(
server/routes/subscriptions.ts:        console.log("‚úÖ Subscription expired:", deletedSub.id);
server/routes/subscriptions.ts:          console.log(
server/routes/subscriptions.ts:          console.log(
server/routes/subscriptions.ts:    console.log("üîÑ Traitement du succ√®s Stripe, session:", sessionId);
server/routes/subscriptions.ts:    console.log("üìß Email client:", customerEmail);
server/routes/subscriptions.ts:    console.log("üí≥ Abonnement Stripe:", subscription.id);
server/routes/subscriptions.ts:    console.log(
server/routes/subscriptions.ts:    console.log("üéØ D√©tails produit - Prix:", priceId, "Montant:", amount);
server/routes/subscriptions.ts:      console.log(
server/routes/subscriptions.ts:      console.log("‚úÖ Utilisateur cr√©√© dans table users:", user.id);
server/routes/subscriptions.ts:    console.log("üìã Plan trouv√©:", plan.name);
server/routes/subscriptions.ts:    console.log("üè¢ Compte professionnel trouv√©:", professionalAccount.id);
server/routes/subscriptions.ts:      console.log("‚ö†Ô∏è Mise √† jour abonnement existant...");
server/routes/subscriptions.ts:        console.log("‚úÖ Abonnement mis √† jour");
server/routes/subscriptions.ts:      console.log("üÜï Cr√©ation nouvel abonnement...");
server/routes/subscriptions.ts:        console.log("‚úÖ Nouvel abonnement cr√©√©");
server/routes/subscriptions.ts:    console.log("üîÑ Mise √† jour membership -> paid...");
server/routes/subscriptions.ts:      console.log("‚úÖ Membership mis √† jour: paid");
server/routes/subscriptions.ts:    console.log("‚úÖ Paiement Stripe confirm√© - Abonnement trait√©");
server/routes/subscriptions.ts:    console.log("‚úÖ Abonnement trait√© avec succ√®s");
server/routes/subscriptions.ts:    console.log("üîÑ Mise √† jour profil utilisateur...");
server/routes/subscriptions.ts:    console.log("‚úÖ Profil utilisateur marqu√© comme compl√©t√©");
server/routes/wishlist-direct.ts:    console.log('üîÑ Configuration compl√®te de la table wishlist...');
server/routes/wishlist-direct.ts:      console.log('üîç V√©rification existence table wishlist...');
server/routes/wishlist-direct.ts:        console.log('‚úÖ Table wishlist existe d√©j√†');
server/routes/wishlist-direct.ts:      console.log('‚ÑπÔ∏è Table wishlist n\'existe pas encore, message:', checkError.message);
server/routes/wishlist-direct.ts:    console.log('üîÑ Migration s√©curis√©e favoris ‚Üí table wishlist...');
server/routes/wishlist-direct.ts:      console.log('‚úÖ Table wishlist confirm√©e, d√©but migration...');
server/routes/wishlist-direct.ts:          console.log(`üîÑ Migration ${favorites.length} favoris pour utilisateur ${user.id}`);
server/routes/wishlist-direct.ts:                  console.log(`‚ÑπÔ∏è Favori ${vehicleId} d√©j√† existant pour utilisateur ${user.id}`);
server/routes/wishlist-direct.ts:                console.log(`‚úÖ Favori ${vehicleId} migr√© avec succ√®s`);
server/routes/wishlist-direct.ts:      console.log(`‚úÖ Migration termin√©e: ${migratedCount} favoris migr√©s`);
server/routes/wishlist-direct.ts:    console.log('üß™ Test de la table wishlist...');
server/routes/wishlist-migration.ts:    console.log('üîÑ Cr√©ation table wishlist via API...');
server/routes/wishlist-migration.ts:      console.log('‚úÖ Table wishlist cr√©√©e avec succ√®s');
server/routes/wishlist-migration.ts:    console.log('üîÑ Migration favoris bio ‚Üí table wishlist...');
server/routes/wishlist-migration.ts:          console.log(`üîÑ Migration ${favorites.length} favoris pour utilisateur ${user.id}`);
server/routes/wishlist-migration.ts:      console.log(`‚úÖ Migration termin√©e: ${migratedCount} favoris migr√©s`);
server/routes/profile.ts:        console.log(`üìÖ Date cr√©ation r√©cup√©r√©e depuis auth.users pour ${userId}:`, authData.user.created_at);
server/routes/profile.ts:        console.log(`üìÖ Date par d√©faut utilis√©e pour ${userId}:`, enrichedData.created_at);
server/routes/profile.ts:      console.log('‚ö†Ô∏è Erreur r√©cup√©ration auth, utilisation des donn√©es users uniquement:', authError);
server/routes/profile.ts:    console.log('üîß Finalisation profil pour user:', userId);
server/routes/profile.ts:    console.log('üîß Donn√©es de mise √† jour:', updateData);
server/routes/profile.ts:    console.log('‚úÖ Profil utilisateur finalis√© pour:', data.email);
server/routes/profile.ts:      console.log('üè¢ Cr√©ation/mise √† jour compte professionnel...');
server/routes/profile.ts:          console.log('‚úÖ Compte professionnel mis √† jour');
server/routes/profile.ts:          console.log('‚úÖ Compte professionnel cr√©√©');
server/setup-db.js:  console.log('üîÑ Configuration de la base de donn√©es...');
server/setup-db.js:    console.log(`ÔøΩ ${description}...`);
server/setup-db.js:      console.log(`‚ö†Ô∏è exec_sql a √©chou√©, essai avec execute_sql...`);
server/setup-db.js:      console.log(`\n------------------- EX√âCUTE CE CODE MANUELLEMENT -------------------`);
server/setup-db.js:      console.log(sql);
server/setup-db.js:      console.log(`------------------------------------------------------------------\n`);
server/setup-db.js:    console.log('ÔøΩ Cr√©ation de la table profiles...');
server/setup-db.js:      console.log('‚ö†Ô∏è √âchec possible de la cr√©ation de la table, continuation...');
server/setup-db.js:    console.log('üì§ Migration des donn√©es si n√©cessaire...');
server/setup-db.js:      console.log('‚ö†Ô∏è Migration des donn√©es non ex√©cut√©e, √† faire manuellement si n√©cessaire');
server/setup-db.js:    console.log('üîß Cr√©ation de la fonction de synchronisation...');
server/setup-db.js:      console.log('‚ö†Ô∏è √âchec de la cr√©ation de la fonction, continuer avec les autres √©tapes...');
server/setup-db.js:    console.log('üîí Configuration des politiques d\'acc√®s...');
server/setup-db.js:      console.log('‚ö†Ô∏è √âchec de la configuration des politiques');
server/setup-db.js:    console.log('‚ö° Cr√©ation du d√©clencheur...');
server/setup-db.js:    console.log('‚ö†Ô∏è Le d√©clencheur est d√©sactiv√© par d√©faut. Une fois que tout fonctionne, d√©commentez la ligne dans le script.');
server/setup-db.js:    console.log('‚úÖ Base de donn√©es partiellement configur√©e !');
server/setup-db.js:    console.log('‚ö†Ô∏è V√©rifiez que les utilisateurs peuvent se connecter avant d\'activer le trigger.');
server/setup-db.js:    console.log('üìä Tables disponibles:', tables?.map(t => t.table_name));
server/storage.ts:console.log('üîó Connexion Supabase initialis√©e avec le client officiel');
server/storage.ts:    console.log(`üîÑ Migration ID utilisateur: ${oldId} ‚Üí ${newUuid}`);
server/storage.ts:      console.log(`‚úÖ Migration r√©ussie: ${oldId} ‚Üí ${newUuid}`);
server/storage.ts:    console.log('üîÑ R√©cup√©ration des annonces ACTIVES avec users depuis Supabase...');
server/storage.ts:        console.log('‚ùå Rechute vers requ√™te directe...');
server/storage.ts:      console.log('‚úÖ Annonces ACTIVES avec users r√©cup√©r√©es depuis Supabase:', data?.length || 0);
server/storage.ts:        console.log('üìä Premi√®re annonce Supabase:', data[0].title);
server/storage.ts:        console.log('üë§ Premier user associ√©:', data[0].users?.name);
server/storage.ts:        console.log('‚ö†Ô∏è  Table annonces vide dans Supabase, utilisation des donn√©es mock');
server/storage.ts:    console.log("üîç DONN√âES AVANT TRANSFORMATION:", JSON.stringify(vehicle, null, 2));
server/storage.ts:    console.log("üîç DONN√âES ENVOY√âES √Ä SUPABASE:", JSON.stringify(annonceData, null, 2));
server/storage.ts:      console.log(`üîß FOR√áAGE ID: ${nextId} (MAX actuel: ${maxIdData[0].id})`);
server/storage.ts:      console.log(`‚úÖ Annonce ${id} supprim√©e avec raison: ${reason}`);
server/storage.ts:    console.log("üîç createMessage appel√© avec:", JSON.stringify(message, null, 2));
server/storage.ts:    console.log("üì¶ Message adapt√© pour Supabase:", JSON.stringify(adaptedMessage, null, 2));
server/storage.ts:      console.log("‚úÖ Message cr√©√© dans la BD:", data.id);
server/storage.ts:    console.log('üîÑ R√©cup√©ration favoris avec table wishlist d√©di√©e pour:', userId);
server/storage.ts:        console.log('‚ùå Table wishlist non disponible, utilisation bio:', wishlistError);
server/storage.ts:        console.log('‚úÖ Favoris r√©cup√©r√©s depuis table d√©di√©e:', favoriteIds);
server/storage.ts:        console.log('‚úÖ Aucun favori trouv√©');
server/storage.ts:        console.log('‚úÖ Aucun ID valide trouv√©');
server/storage.ts:      console.log('üîç IDs num√©riques pour requ√™te optimis√©e:', numericIds);
server/storage.ts:      console.log('‚úÖ Favoris r√©cup√©r√©s avec d√©tails (optimis√©):', favorites.length);
server/storage.ts:    console.log('üîÑ Migration vers table wishlist d√©di√©e:', item);
server/storage.ts:        console.log('‚ùå Table wishlist non disponible, utilisation bio:', wishlistError);
server/storage.ts:      console.log('‚úÖ Favori ajout√© table wishlist d√©di√©e:', result);
server/storage.ts:    console.log('üîÑ Suppression favori table wishlist:', { userId, vehicleId });
server/storage.ts:        console.log('‚ùå Table wishlist non disponible, utilisation bio:', wishlistError);
server/storage.ts:      console.log('‚úÖ Favori supprim√© table wishlist d√©di√©e');
server/storage.ts:    console.log('üîÑ V√©rification favori table wishlist:', { userId, vehicleId });
server/storage.ts:        console.log('‚ùå Table wishlist non disponible, utilisation bio:', wishlistError);
server/storage.ts:      console.log('‚úÖ V√©hicule en favori (table d√©di√©e):', isInWishlist);
server/storage.ts:    console.log('üîÑ R√©cup√©ration de TOUTES les annonces (admin) avec users depuis Supabase...');
server/storage.ts:        console.log('‚ùå Rechute vers requ√™te directe...');
server/storage.ts:      console.log('‚úÖ TOUTES les annonces avec users r√©cup√©r√©es depuis Supabase:', data?.length || 0);
server/storage.ts:          console.log('‚ö†Ô∏è  La colonne is_active doit √™tre ajout√©e √† la table annonces dans Supabase');
server/storage.ts:          console.log('‚ö†Ô∏è  Commande SQL: ALTER TABLE annonces ADD COLUMN is_active BOOLEAN DEFAULT true;');
server/storage.ts:      console.log(`‚úÖ Statut annonce ${id} chang√©: ${isActive ? 'active' : 'd√©sactiv√©e'}`);
server/storage.ts:      console.log(`üîç V√©rification quota pour l'utilisateur: ${userId}`);
server/storage.ts:        console.log('üë§ Utilisateur individuel d√©tect√© - aucune limite');
server/storage.ts:        console.log('üì¶ Aucun abonnement actif - limite par d√©faut');
server/storage.ts:      console.log(`üìä Quota: ${activeListings}/${maxListings || 'illimit√©'} annonces actives`);
server/storage.ts:      console.log(`‚úÖ Boost activ√© jusqu'au ${newBoostEnd.toISOString()} pour l'annonce ${logData.annonce_id}`);
server/storage.ts:    console.log('üîÑ R√©cup√©ration des annonces EN ATTENTE DE MOD√âRATION depuis Supabase...');
server/storage.ts:        console.log('‚úÖ Aucune annonce en attente trouv√©e');
server/storage.ts:      console.log(`‚úÖ ${data.length} annonce(s) en attente r√©cup√©r√©e(s)`);
server/storage.ts:    console.log(`üîÑ Approbation de l'annonce ${id}...`);
server/storage.ts:      console.log(`‚úÖ Annonce ${id} approuv√©e avec succ√®s`);
server/storage.ts:    console.log(`üîÑ Rejet de l'annonce ${id}...`);
server/storage.ts:      console.log(`‚úÖ Annonce ${id} rejet√©e avec succ√®s`);
server/test-all-49-annonces.ts:  console.log('üìä TEST COMPLET DES 49 ANNONCES [BD]');
server/test-all-49-annonces.ts:    console.log(`‚úÖ ${allAnnonces?.length} annonces r√©cup√©r√©es avec users`);
server/test-all-49-annonces.ts:    console.log('\nüìà STATISTIQUES COMPL√àTES:');
server/test-all-49-annonces.ts:    console.log('\nüöó Par cat√©gorie:');
server/test-all-49-annonces.ts:      console.log(`   ${cat}: ${count} annonces`);
server/test-all-49-annonces.ts:    console.log('\nüë• Par type d\'utilisateur:');
server/test-all-49-annonces.ts:      console.log(`   ${type}: ${count} annonces`);
server/test-all-49-annonces.ts:    console.log('\nüí∞ Par gamme de prix:');
server/test-all-49-annonces.ts:      console.log(`   ${range}: ${count} annonces`);
server/test-all-49-annonces.ts:    console.log('\nüîç EXEMPLES PAR TYPE:');
server/test-all-49-annonces.ts:    console.log('\nProfessionnels:');
server/test-all-49-annonces.ts:      console.log(`   ${a.id}: ${a.title} - ${a.price}‚Ç¨ (${a.users.name})`);
server/test-all-49-annonces.ts:    console.log('\nParticuliers:');
server/test-all-49-annonces.ts:      console.log(`   ${a.id}: ${a.title} - ${a.price}‚Ç¨ (${a.users.name})`);
server/test-auto-sync.ts:  console.log('üß™ Test de la synchronisation automatique...');
server/test-auto-sync.ts:    console.log(`üìù Cr√©ation utilisateur test: ${testEmail}`);
server/test-auto-sync.ts:    console.log('‚úÖ Utilisateur cr√©√© dans auth.users');
server/test-auto-sync.ts:    console.log('üîç ID utilisateur:', newUser.user.id);
server/test-auto-sync.ts:      console.log('‚úÖ Utilisateur trouv√© dans public.users:', publicUser.name);
server/test-auto-sync.ts:      console.log('‚úÖ Profil cr√©√©:', profile.account_type, profile.phone);
server/test-auto-sync.ts:    console.log('üßπ Suppression utilisateur test...');
server/test-auto-sync.ts:    console.log('‚úÖ Utilisateur test supprim√©');
server/test-corrected-vehicle-data.ts:  console.log('üîç TEST DES DONN√âES CORRIG√âES VEHICLE + USER');
server/test-corrected-vehicle-data.ts:    console.log(`üìä ${data?.length} v√©hicules avec donn√©es compl√®tes`);
server/test-corrected-vehicle-data.ts:      console.log(`\n--- V√âHICULE ${index + 1} ---`);
server/test-corrected-vehicle-data.ts:      console.log('‚úÖ Titre:', annonce.title);
server/test-corrected-vehicle-data.ts:      console.log('‚úÖ Prix:', annonce.price, '‚Ç¨');
server/test-corrected-vehicle-data.ts:        console.log('üë§ VENDEUR:');
server/test-corrected-vehicle-data.ts:        console.log('   Nom:', annonce.users.name);
server/test-corrected-vehicle-data.ts:        console.log('   Email:', annonce.users.email);
server/test-corrected-vehicle-data.ts:        console.log('   T√©l√©phone:', annonce.users.phone || 'Non renseign√©');
server/test-corrected-vehicle-data.ts:        console.log('   WhatsApp:', annonce.users.whatsapp || 'Non renseign√©');
server/test-corrected-vehicle-data.ts:        console.log('   Type:', annonce.users.type);
server/test-corrected-vehicle-data.ts:        console.log('   Entreprise:', annonce.users.company_name || 'N/A');
server/test-corrected-vehicle-data.ts:        console.log('   V√©rifi√©:', annonce.users.verified ? 'Oui' : 'Non');
server/test-corrected-vehicle-data.ts:        console.log('‚ùå PROBL√àME: Donn√©es vendeur manquantes');
server/test-corrected-vehicle-data.ts:    console.log('\nüéØ R√âSULTAT: Les donn√©es vendeur sont maintenant disponibles pour l\'affichage !');
server/test-insert-annonce.ts:  console.log('üß™ TEST INSERTION - Une annonce dans la table annonces');
server/test-insert-annonce.ts:    console.log('‚úÖ TEST R√âUSSI - Annonce ins√©r√©e:', data);
server/test-insert-annonce.ts:    console.log('‚úÖ LECTURE CONFIRM√âE - Annonce r√©cup√©r√©e:', readData);
server/test-insert-annonce.ts:    console.log('üéâ CONNEXION TABLE ANNONCES FONCTIONNELLE !');
server/test-relation-after-creation.ts:  console.log('üîó TEST DE LA RELATION APR√àS CR√âATION');
server/test-relation-after-creation.ts:      console.log('üí° Ex√©cutez le fichier create-foreign-key-relation.sql dans Supabase');
server/test-relation-after-creation.ts:    console.log('‚úÖ RELATION FONCTIONNELLE !');
server/test-relation-after-creation.ts:    console.log(`üìä ${joinTest?.length} annonces avec users li√©s`);
server/test-relation-after-creation.ts:      console.log(`\n   Annonce ${annonce.id}: ${annonce.title}`);
server/test-relation-after-creation.ts:      console.log(`   Prix: ${annonce.price}‚Ç¨`);
server/test-relation-after-creation.ts:      console.log(`   User: ${annonce.users?.name} (${annonce.users?.email})`);
server/test-relation-after-creation.ts:      console.log(`   Type: ${annonce.users?.type}`);
server/test-relation-after-creation.ts:    console.log('\nüìà STATISTIQUES:');
server/test-relation-after-creation.ts:    console.log(`   Total: ${total} annonces test√©es`);
server/test-relation-after-creation.ts:    console.log(`   Particuliers: ${individuals}`);
server/test-relation-after-creation.ts:    console.log(`   Professionnels: ${professionals}`);
server/test-relations-final.ts:  console.log('üîó TEST FINAL DES RELATIONS ANNONCES ‚Üî USERS');
server/test-relations-final.ts:    console.log('‚úÖ RELATIONS FONCTIONNELLES !');
server/test-relations-final.ts:    console.log(`üìä ${annoncesWith Users?.length} annonces avec users li√©s`);
server/test-relations-final.ts:      console.log(`   ${annonce.id}: ${annonce.title}`);
server/test-relations-final.ts:      console.log(`      ‚Üí User: ${annonce.users.name} (${annonce.users.email})`);
server/test-relations-final.ts:      console.log(`      ‚Üí Prix: ${annonce.price}‚Ç¨ | Cat√©gorie: ${annonce.category}\n`);
server/test-relations-final.ts:    console.log('üìà R√âPARTITION PAR TYPE:');
server/test-relations-final.ts:    console.log(`   Particuliers: ${individualCount} annonces`);
server/test-relations-final.ts:    console.log(`   Professionnels: ${professionalCount} annonces`);
server/test-supabase.ts:  console.log('üîó TEST CONNEXION SUPABASE - PREUVE DEMAND√âE');
server/test-supabase.ts:    console.log('1Ô∏è‚É£ Test connexion...');
server/test-supabase.ts:    console.log('‚úÖ Connexion Supabase confirm√©e');
server/test-supabase.ts:    console.log('2Ô∏è‚É£ Tentative cr√©ation table exemple...');
server/test-supabase.ts:    console.log('3Ô∏è‚É£ Insertion des donn√©es de test...');
server/test-supabase.ts:      console.log('‚ö†Ô∏è  Table exemple n\'existe pas encore. Erreur:', insertError.message);
server/test-supabase.ts:        console.log('üìã Tables existantes dans votre base:', tables.map(t => t.table_name));
server/test-supabase.ts:    console.log('‚úÖ PREUVE CONNEXION SUPABASE - DONN√âES INS√âR√âES:', insertData);
server/test-supabase.ts:    console.log('üéâ PREUVE FINALE - Donn√©es lues depuis Supabase:', readData);
server/test-sync-api.ts:  console.log('üß™ Test de l\'API de synchronisation...');
server/test-sync-api.ts:    console.log('‚úÖ Utilisateur cr√©√© dans auth.users:', newUser.user.id);
server/test-sync-api.ts:      console.log('‚úÖ Synchronisation API r√©ussie:', syncData.user.name);
server/test-sync-api.ts:      console.log('üìä Profil cr√©√©:', syncData.profile.account_type);
server/test-sync-api.ts:      console.log('üìã Statut synchronisation:', statusData);
server/test-sync-api.ts:    console.log('üßπ Utilisateur test supprim√©');
server/test-user-sync.ts:  console.log('üß™ Test de synchronisation des utilisateurs...');
server/test-user-sync.ts:    console.log('üë• Utilisateurs auth.users:', authUsers.users.length);
server/test-user-sync.ts:      console.log(`  - ${user.email} (${user.id})`);
server/test-user-sync.ts:      console.log(`    M√©tadonn√©es:`, user.user_metadata);
server/test-user-sync.ts:      console.log('üìä Utilisateurs public.users:', publicUsers.length);
server/test-user-sync.ts:        console.log(`  - ${user.email} (${user.id}) - ${user.name}`);
server/test-user-sync.ts:      console.log('‚ö†Ô∏è Utilisateurs manquants dans public.users:', missingInPublic);
server/test-user-sync.ts:      console.log('‚úÖ Tous les utilisateurs auth sont synchronis√©s');
server/test-vehicle-with-user.ts:  console.log('üîç TEST STRUCTURE DONN√âES VEHICLE + USER');
server/test-vehicle-with-user.ts:    console.log('üìä STRUCTURE DES DONN√âES RE√áUES:');
server/test-vehicle-with-user.ts:      console.log(`\n--- V√âHICULE ${index + 1} ---`);
server/test-vehicle-with-user.ts:      console.log('ID:', vehicle.id);
server/test-vehicle-with-user.ts:      console.log('Title:', vehicle.title);
server/test-vehicle-with-user.ts:      console.log('User ID:', vehicle.user_id);
server/test-vehicle-with-user.ts:      console.log('Users Object:', JSON.stringify(vehicle.users, null, 2));
server/test-vehicle-with-user.ts:        console.log('‚úÖ User Name:', vehicle.users.name);
server/test-vehicle-with-user.ts:        console.log('‚úÖ User Email:', vehicle.users.email);
server/test-vehicle-with-user.ts:        console.log('‚úÖ User Phone:', vehicle.users.phone);
server/test-vehicle-with-user.ts:        console.log('‚úÖ User WhatsApp:', vehicle.users.whatsapp);
server/test-vehicle-with-user.ts:        console.log('‚úÖ User Type:', vehicle.users.type);
server/test-vehicle-with-user.ts:        console.log('‚ùå PROBL√àME: Pas de donn√©es users');
server/vite.ts:  console.log(`${formattedTime} [${source}] ${message}`);
server/auth-hooks.ts:  console.log("üîß Configuration des hooks d'authentification...");
server/auth-hooks.ts:      console.log(`‚úÖ Utilisateur ${email} existe d√©j√†`);
server/auth-hooks.ts:    console.log(`‚úÖ Utilisateur auto-cr√©√©: ${email}`);
server/auth-hooks.ts:      console.log(`üîÑ Cr√©ation utilisateur manquant: ${authUserId}`);
server/routes.ts:      console.log("üîÑ R√©cup√©ration nombre total annonces supprim√©es...");
server/routes.ts:      console.log(`‚úÖ Nombre total annonces supprim√©es: ${totalDeleted}`);
server/routes.ts:      console.log("üìä R√©cup√©ration statistiques compl√®tes annonces...");
server/routes.ts:      console.log("üìà Stats g√©n√©r√©es:", stats);
server/routes.ts:      console.log(
server/routes.ts:        console.log("‚úÖ Utilisateur existant trouv√©:", existingUser.name);
server/routes.ts:      console.log(
server/routes.ts:      console.log(
server/routes.ts:        console.log(`üìä R√©sultat v√©rification quota:`, quotaCheck);
server/routes.ts:      console.log(`üìä R√©cup√©ration quota pour utilisateur: ${userId}`);
server/routes.ts:      console.log(
server/routes.ts:      console.log("‚úÖ Message cr√©√© avec succ√®s:", message.id);
server/routes.ts:        console.log("üè¢ V√©rification compte professionnel...");
server/routes.ts:        console.log("üìÑ Donn√©es re√ßues:", req.body);
server/routes.ts:        console.log("‚úÖ Compte professionnel mis √† jour:", proAccount.id);
server/routes.ts:      console.log("üè¢ R√©cup√©ration comptes professionnels pour admin...");
server/routes.ts:      console.log(
server/routes.ts:        console.log(`üìÑ R√©cup√©ration documents pour compte pro ${id}...`);
server/routes.ts:        console.log(`‚úÖ ${documents?.length || 0} documents r√©cup√©r√©s`);
server/routes.ts:      console.log(`üîç V√©rification compte pro ${id}: ${action}`);
server/routes.ts:          console.log(
server/routes.ts:        console.log("‚úÖ Compte professionnel approuv√©");
server/routes.ts:        console.log("‚úÖ Compte professionnel rejet√©");
server/routes.ts:      console.log(`üîó G√©n√©ration URL sign√©e pour: ${path}`);
server/routes.ts:      console.log("‚úÖ URL sign√©e g√©n√©r√©e");
server/routes.ts:      console.log("üóëÔ∏è R√©cup√©ration annonces supprim√©es...");
server/routes.ts:      console.log(
server/routes.ts:    console.log("üìà Route performance-stats appel√©e");
server/routes.ts:      console.log("üìà R√©cup√©ration statistiques de performance admin...");
server/routes.ts:      console.log("‚ú® Statistiques performance g√©n√©r√©es:", stats);
server/routes.ts:      console.log(`üî¥ Suppression annonce ${id} par admin...`);
server/routes.ts:      console.log(`‚úÖ Annonce ${id} supprim√©e par admin avec succ√®s`);
server/routes.ts:        console.log(`üì∏ Upload ${type} pour compte pro ${userId}`);
server/routes.ts:        console.log(`‚úÖ ${type} upload√©: ${fileName}`);
server/routes.ts:        console.log("üî¢ Comptage des comptes professionnels en attente...");
server/routes.ts:        console.log(`‚úÖ Comptes en attente trouv√©s: ${count}`);
server/routes.ts:      console.log(`üí≥ V√©rification abonnement pour user ${userId}...`);
server/routes.ts:      console.log("üí≥ Abonnement r√©cup√©r√©:", subscriptionInfo);
server/routes.ts:    console.log(`üî• ROUTE APPEL√âE - professional-accounts/${req.params.id}`);
server/routes.ts:      console.log(`üî• ID pars√©: ${accountId}`);
server/routes.ts:        console.log("‚ùå ID invalide");
server/routes.ts:      console.log(`üè¢ Recherche compte professionnel avec ID ${accountId}...`);
server/routes.ts:      console.log("‚úÖ Compte professionnel r√©cup√©r√©:", account.company_name);
server/routes.ts:      console.log(`üè¢ Recherche compte professionnel pour user ${userId}...`);
server/routes.ts:      console.log("‚úÖ Compte professionnel trouv√©:", account.id);
server/routes.ts:      console.log(`üè¢ Mise √† jour compte professionnel ${accountId}...`);
server/routes.ts:      console.log(
server/routes.ts:      console.log(
server/routes.ts:        console.log(
server/routes.ts:      console.log(
server/routes.ts:      console.log(
server/routes.ts:      console.log(`‚úÖ ${allUsers.length} utilisateurs auth r√©cup√©r√©s`);
server/routes.ts:      console.log(
server/routes.ts:      console.log(
server/routes.ts:      console.log(
server/routes.ts:      console.log(`üîê Admin action ${action} pour user ${userId}...`);
server/routes.ts:        console.log("üìß Confirmation de l'email dans Supabase Auth...");
server/routes.ts:        console.log("üë§ User avant confirmation:", {
server/routes.ts:          console.log("‚úÖ Email confirm√© dans Supabase Auth:", {
server/routes.ts:          console.log("‚úÖ Profil utilisateur public mis √† jour");
server/routes.ts:        console.log(
server/routes.ts:      console.log(`‚úÖ Utilisateur ${userId} ${action} avec succ√®s`);
server/routes.ts:        console.log(
server/routes.ts:      console.log("üéØ Stripe webhook re√ßu:", event.type);
server/routes.ts:          console.log("‚úÖ Paiement confirm√© pour session:", session.id);
server/routes.ts:          console.log("üìä Metadata:", session.metadata);
server/routes.ts:            console.log("üöÄ Activation boost pour session:", session.id);
server/routes.ts:              console.log(
server/routes.ts:            console.log("üìã Traitement abonnement pour session:", session.id);
server/routes.ts:          console.log("üí∞ Paiement facture r√©ussi");
server/routes.ts:          console.log("‚ùå Abonnement supprim√©");
server/routes.ts:          console.log(`üîî √âv√©nement non g√©r√©: ${event.type}`);
