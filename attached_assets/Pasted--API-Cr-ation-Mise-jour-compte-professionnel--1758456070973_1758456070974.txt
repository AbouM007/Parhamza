  // ===============================
  // API : Cr√©ation / Mise √† jour compte professionnel
  // ===============================

  app.post("/api/profile/complete", async (req, res) => {
    try {
      console.log("üè¢ Cr√©ation/M√†J du compte professionnel...");
      console.log("üìÑ Donn√©es re√ßues:", req.body);

      // 1) Authentification
      const authHeader = req.headers.authorization;
      if (!authHeader) {
        return res
          .status(401)
          .json({ error: "Token d'authentification manquant" });
      }
      const token = authHeader.replace("Bearer ", "");
      const {
        data: { user },
        error: authError,
      } = await supabaseServer.auth.getUser(token);
      if (authError || !user) {
        console.error("‚ùå Auth √©chou√©e:", authError);
        return res.status(401).json({ error: "Token invalide" });
      }

      // 2) Champs attendus
      const {
        companyName,
        siret,
        companyAddress,
        phone,
        email,
        website,
        description,
      } = req.body;

      if (!companyName || !siret) {
        return res
          .status(400)
          .json({ error: "Nom entreprise et SIRET obligatoires" });
      }

      // V√©rif SIRET (14 chiffres)
      if (!/^\d{14}$/.test(siret)) {
        return res
          .status(400)
          .json({ error: "SIRET invalide (14 chiffres requis)" });
      }

      // 3) V√©rifier si un compte existe d√©j√† pour ce user
      const { data: existing, error: existingErr } = await supabaseServer
        .from("professional_accounts")
        .select("id")
        .eq("user_id", user.id)
        .single();

      if (existingErr && existingErr.code !== "PGRST116") {
        // PGRST116 = pas de ligne trouv√©e
        console.error("‚ùå Erreur recherche compte:", existingErr);
        return res.status(500).json({ error: "Erreur recherche compte" });
      }

      // 4) Insert ou Update
      let query;
      if (existing) {
        // Mise √† jour
        query = supabaseServer
          .from("professional_accounts")
          .update({
            company_name: companyName,
            siret,
            company_address: companyAddress || null,
            phone: phone || null,
            email: email || null,
            website: website || null,
            description: description || null,
            updated_at: new Date().toISOString(),
          })
          .eq("id", existing.id)
          .select()
          .single();
      } else {
        // Cr√©ation
        query = supabaseServer
          .from("professional_accounts")
          .insert({
            user_id: user.id,
            company_name: companyName,
            siret,
            company_address: companyAddress || null,
            phone: phone || null,
            email: email || null,
            website: website || null,
            description: description || null,
            membership: "free",
            verification_status: "not_started",
            created_at: new Date().toISOString(),
          })
          .select()
          .single();
      }

      const { data: proAccount, error: upsertErr } = await query;
      if (upsertErr) {
        console.error("‚ùå Erreur sauvegarde compte pro:", upsertErr);
        return res
          .status(500)
          .json({ error: "Erreur sauvegarde compte professionnel" });
      }

      console.log("‚úÖ Compte professionnel enregistr√©:", proAccount.id);

      return res.json({
        success: true,
        professionalAccount: proAccount,
        message: existing ? "Compte pro mis √† jour" : "Compte pro cr√©√©",
      });
    } catch (err) {
      console.error("‚ùå Erreur API /api/profile/complete:", err);
      return res.status(500).json({ error: "Erreur serveur interne" });
    }
  });