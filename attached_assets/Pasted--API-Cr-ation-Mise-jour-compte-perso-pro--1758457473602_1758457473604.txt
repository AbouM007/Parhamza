 // ===============================
  // API : Cr√©ation / Mise √† jour compte (perso + pro)
  // ===============================

  app.post("/api/profile/complete", async (req, res) => {
    try {
      console.log("üîî Cr√©ation/M√†J du compte (perso ou pro)...");
      console.log("üìÑ Donn√©es re√ßues:", req.body);

      // 1) Authentification
      const authHeader = req.headers.authorization;
      if (!authHeader) {
        return res
          .status(401)
          .json({ error: "Token d'authentification manquant" });
      }
      const token = authHeader.replace("Bearer ", "");
      const {
        data: { user },
        error: authError,
      } = await supabaseServer.auth.getUser(token);
      if (authError || !user) {
        console.error("‚ùå Auth √©chou√©e:", authError);
        return res.status(401).json({ error: "Token invalide" });
      }

      // 2) Champs re√ßus
      const {
        companyName,
        siret,
        companyAddress,
        phone,
        email,
        website,
        description,
        name,
        city,
        postalCode,
        whatsapp,
      } = req.body;

      // ======================================
      // CAS 1 : COMPTE PROFESSIONNEL
      // ======================================
      if (companyName && siret) {
        console.log("üè¢ D√©tection compte professionnel");

        if (!/^\d{14}$/.test(siret)) {
          return res
            .status(400)
            .json({ error: "SIRET invalide (14 chiffres requis)" });
        }

        // V√©rifier si un compte existe d√©j√†
        const { data: existing, error: existingErr } = await supabaseServer
          .from("professional_accounts")
          .select("id")
          .eq("user_id", user.id)
          .single();

        if (existingErr && existingErr.code !== "PGRST116") {
          console.error("‚ùå Erreur recherche compte pro:", existingErr);
          return res
            .status(500)
            .json({ error: "Erreur recherche compte professionnel" });
        }

        let query;
        if (existing) {
          // Mise √† jour
          query = supabaseServer
            .from("professional_accounts")
            .update({
              company_name: companyName,
              siret,
              company_address: companyAddress || null,
              phone: phone || null,
              email: email || null,
              website: website || null,
              description: description || null,
              updated_at: new Date().toISOString(),
            })
            .eq("id", existing.id)
            .select()
            .single();
        } else {
          // Cr√©ation
          query = supabaseServer
            .from("professional_accounts")
            .insert({
              user_id: user.id,
              company_name: companyName,
              siret,
              company_address: companyAddress || null,
              phone: phone || null,
              email: email || null,
              website: website || null,
              description: description || null,
              membership: "free",
              verification_status: "not_started",
              created_at: new Date().toISOString(),
            })
            .select()
            .single();
        }

        const { data: proAccount, error: upsertErr } = await query;
        if (upsertErr) {
          console.error("‚ùå Erreur sauvegarde compte pro:", upsertErr);
          return res
            .status(500)
            .json({ error: "Erreur sauvegarde compte professionnel" });
        }

        console.log("‚úÖ Compte professionnel enregistr√©:", proAccount.id);
        return res.json({
          success: true,
          type: "professional",
          professionalAccount: proAccount,
          message: existing ? "Compte pro mis √† jour" : "Compte pro cr√©√©",
        });
      }

      // ======================================
      // CAS 2 : COMPTE PARTICULIER
      // ======================================
      console.log("üë§ D√©tection compte particulier");

      if (!name || !phone || !city || !postalCode) {
        return res.status(400).json({
          error:
            "Champs obligatoires manquants (name, phone, city, postalCode)",
        });
      }

      const { data: personal, error: personalErr } = await supabaseServer
        .from("users")
        .update({
          name: name, // ‚úÖ correspond √† la colonne "name"
          phone,
          city,
          postal_code: postalCode, // ‚úÖ correspond √† "postal_code" (snake_case)
          whatsapp: whatsapp || null,
          profile_completed: true, // ‚úÖ onboarding marqu√© comme fini
          type: "individual", // ‚úÖ explicite le type
          updated_at: new Date().toISOString(),
        })
        .eq("id", user.id)
        .select()
        .single();

      if (personalErr) {
        console.error("‚ùå Erreur sauvegarde particulier:", personalErr);
        return res
          .status(500)
          .json({ error: "Erreur sauvegarde compte personnel" });
      }

      console.log("‚úÖ Compte particulier mis √† jour:", personal.id);
      return res.json({
        success: true,
        type: "personal",
        profile: personal,
        message: "Compte personnel mis √† jour",
      });
    } catch (err) {
      console.error("‚ùå Erreur API /api/profile/complete:", err);
      return res.status(500).json({ error: "Erreur serveur interne" });
    }
  });