je te fais un résumé clair de ce qu’on a fait aujourd’hui :

📌 Résumé de la journée
1. Quota des annonces

Tu avais une ancienne fonction checkProfessionalListingQuota → qui ne limitait pas les particuliers.

On l’a remplacée par checkListingQuota pour gérer à la fois :

Particuliers gratuits (quota = 5 annonces, en dur),

Pros avec abonnement (quota depuis subscription_plans.max_listings dans la DB),

Pros illimités (max_listings = null).

On a confirmé que le quota est bien vérifié dans POST /api/vehicles avant insertion.

2. Problème constaté

Malgré ça, tu pouvais quand même publier une 6ᵉ annonce.

On a découvert que :

Le backend vérifie bien, mais il faut être sûr que userId arrive dans vehicleData.

Le frontend (CreateListingForm.tsx) utilise une fonction canProceed() qui ne connaît que la validation du formulaire (titre, description, etc.), mais pas le quota.

3. Diagnostic via logs

Tu as ajouté un console.log("DEBUG USER ID:", vehicleData.userId); → pour voir si le backend reçoit bien l’utilisateur.

Les logs frontend montrent que canProceed = false tant que les champs sont vides, mais pas lié au quota.

Donc : côté backend, il faut bien bloquer si canCreate = false.

Côté frontend, il faut enrichir canProceed avec une vérification du quota pour désactiver le bouton et afficher un message clair.

4. Prochaines actions

Côté serveur :

Vérifier que return res.status(403)... empêche bien storage.createVehicle de s’exécuter.

Vérifier que userId est toujours envoyé par le front.

Côté client :

Appeler /api/users/:id/quota au chargement du formulaire.

Stocker quota.remaining.

Désactiver le bouton si remaining = 0.

Afficher un message “Vous avez atteint votre limite d’annonces”.

👉 En résumé :

Backend : la logique est déjà prête → juste s’assurer que userId est bien transmis et que le return stoppe vraiment la création.

Frontend : il manque la prise en compte du quota (c’est pour ça que le bouton reste cliquable et qu’un particulier peut quand même essayer de soumettre).