Actuellement ta route /api/profile/complete est totalement orientée “compte professionnel” :

Elle exige companyName et siret.

Si ces champs manquent, elle renvoie immédiatement 400 Bad Request.
👉 Donc un particulier qui envoie seulement name, phone, city, postalCode se fait bloquer.

✅ Solution 1 (la plus propre) : séparer les routes

Créer deux routes distinctes :

app.post("/api/profile/complete/personal", async (req, res) => {
  // ici on gère particuliers
});

app.post("/api/profile/complete/professional", async (req, res) => {
  // ton code actuel
});


Avantage : chaque route a ses propres validations → pas de conflit.
Inconvénient : ça double un peu le code.

✅ Solution 2 (rapide) : adapter la même route

On garde /api/profile/complete, mais on détecte le type de compte :

app.post("/api/profile/complete", async (req, res) => {
  try {
    console.log("🔔 Création/MàJ profil...");
    const authHeader = req.headers.authorization;
    if (!authHeader) return res.status(401).json({ error: "Token manquant" });
    const token = authHeader.replace("Bearer ", "");
    const { data: { user }, error: authError } = await supabaseServer.auth.getUser(token);
    if (authError || !user) return res.status(401).json({ error: "Token invalide" });

    // champs reçus
    const { companyName, siret, companyAddress, phone, email, website, description, name, city, postalCode } = req.body;

    if (companyName && siret) {
      // 👉 cas PRO
      if (!/^\d{14}$/.test(siret)) {
        return res.status(400).json({ error: "SIRET invalide (14 chiffres)" });
      }

      // upsert dans professional_accounts (ton code existant)
      // ...
      return res.json({ success: true, type: "professional" });

    } else {
      // 👉 cas PARTICULIER
      if (!name || !phone || !city || !postalCode) {
        return res.status(400).json({ error: "Champs obligatoires manquants" });
      }

      // upsert dans table users (ou personal_profiles)
      const { data, error } = await supabaseServer
        .from("users")
        .update({
          full_name: name,
          phone,
          city,
          postal_code: postalCode,
          updated_at: new Date().toISOString()
        })
        .eq("id", user.id)
        .select()
        .single();

      if (error) {
        console.error("❌ Erreur sauvegarde particulier:", error);
        return res.status(500).json({ error: "Erreur sauvegarde compte personnel" });
      }

      return res.json({ success: true, type: "personal", profile: data });
    }

  } catch (err) {
    console.error("❌ Erreur API /api/profile/complete:", err);
    return res.status(500).json({ error: "Erreur serveur interne" });
  }
});


👉 Concrètement :

Si companyName + siret présents → compte pro (ton code actuel).

Sinon → compte particulier, on fait un update dans users.