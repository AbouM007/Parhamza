{async (e) => {
                    const file = e.target.files?.[0];
                    if (!file || !user?.id) return;

                    // V√©rifier le format
                    const allowedTypes = [
                      "image/jpeg",
                      "image/jpg",
                      "image/png",
                      "image/webp",
                    ];
                    if (!allowedTypes.includes(file.type)) {
                      alert(
                        "Seuls les formats JPG, PNG et WEBP sont autoris√©s",
                      );
                      return;
                    }

                    // V√©rifier la taille (1MB max pour Replit)
                    if (file.size > 1 * 1024 * 1024) {
                      alert("L'image ne doit pas d√©passer 1 MB pour Replit");
                      return;
                    }

                    // Fonction pour compresser l'image
                    const compressImage = (file: File): Promise<File> => {
                      return new Promise((resolve) => {
                        const canvas = document.createElement("canvas");
                        const ctx = canvas.getContext("2d");
                        const img = new Image();

                        img.onload = () => {
                          // Redimensionner √† 200x200 max
                          const maxSize = 200;
                          let { width, height } = img;

                          if (width > height) {
                            if (width > maxSize) {
                              height = (height * maxSize) / width;
                              width = maxSize;
                            }
                          } else {
                            if (height > maxSize) {
                              width = (width * maxSize) / height;
                              height = maxSize;
                            }
                          }

                          canvas.width = width;
                          canvas.height = height;

                          ctx?.drawImage(img, 0, 0, width, height);

                          canvas.toBlob(
                            (blob) => {
                              if (blob) {
                                const compressedFile = new File(
                                  [blob],
                                  file.name,
                                  {
                                    type: "image/jpeg",
                                    lastModified: Date.now(),
                                  },
                                );
                                resolve(compressedFile);
                              } else {
                                resolve(file);
                              }
                            },
                            "image/jpeg",
                            0.8,
                          );
                        };

                        img.src = URL.createObjectURL(file);
                      });
                    };

                    // Compresser l'image avant upload
                    const compressedFile = await compressImage(file);

                    const formData = new FormData();
                    formData.append("avatar", compressedFile);

                    console.log("üöÄ D√©but upload avatar");
                    console.log("üìÅ Fichier original:", {
                      name: file.name,
                      size: file.size,
                      type: file.type,
                    });
                    console.log("üìÅ Fichier compress√©:", {
                      name: compressedFile.name,
                      size: compressedFile.size,
                      type: compressedFile.type,
                    });
                    console.log("üë§ User ID:", user.id);

                    try {
                      const controller = new AbortController();
                      const timeoutId = setTimeout(
                        () => controller.abort(),
                        30000,
                      ); // 30s timeout

                      const response = await fetch(
                        `/api/avatar/upload/${user.id}`,
                        {
                          method: "POST",
                          body: formData,
                          signal: controller.signal,
                        },
                      );

                      clearTimeout(timeoutId);

                      console.log("Statut de la r√©ponse:", response.status);
                      console.log("Headers de la r√©ponse:", [
                        ...response.headers.entries(),
                      ]);

                      // V√©rifier si la r√©ponse est OK avant de parser JSON
                      if (!response.ok) {
                        const errorText = await response.text();
                        console.error(
                          "Erreur HTTP:",
                          response.status,
                          errorText,
                        );
                        alert(`Erreur HTTP ${response.status}: ${errorText}`);
                        return;
                      }

                      const result = await response.json();

                      console.log("Statut de la r√©ponse:", response.status);
                      console.log("R√©sultat complet:", result);

                      if (response.ok) {
                        // Mettre √† jour le profil localement - rafra√Æchir les donn√©es utilisateur
                        await refreshDbUser();
                        alert("Photo de profil mise √† jour avec succ√®s !");
                      } else {
                        console.error("Erreur API:", result);
                        alert(
                          `Erreur: ${result.error || result.message || "Erreur inconnue"}`,
                        );
                      }
                    } catch (error) {
                      const errorMessage =
                        error instanceof Error
                          ? error.message
                          : "Erreur inconnue";
                      const errorStack =
                        error instanceof Error ? error.stack : undefined;

                      console.error(
                        "Erreur upload avatar - Message:",
                        errorMessage,
                      );
                      console.error(
                        "Erreur upload avatar - Stack:",
                        errorStack,
                      );
                      console.error(
                        "Erreur upload avatar - Type:",
                        typeof error,
                      );
                      console.error(
                        "Erreur upload avatar - Name:",
                        error instanceof Error ? error.name : "Unknown",
                      );

                      // Gestion sp√©cifique des erreurs
                      if (
                        error instanceof Error &&
                        error.name === "AbortError"
                      ) {
                        alert(
                          "Timeout: L'upload a pris trop de temps. Essayez avec une image plus petite.",
                        );
                      } else if (errorMessage.includes("Failed to fetch")) {
                        alert(
                          "Erreur de connexion au serveur. V√©rifiez votre connexion et r√©essayez.",
                        );
                      } else {
                        alert(
                          `Erreur lors de l'upload de l'avatar: ${errorMessage}`,
                        );
                      }
                    }
                  }}